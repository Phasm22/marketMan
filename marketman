#!/usr/bin/env python3
"""
MarketMan CLI - Easy command-line interface
Matches your server monitoring workflow with simple commands
"""

import sys
import argparse
from pushover_utils import send_pushover_notification, send_energy_alert, test_pushover

def main():
    parser = argparse.ArgumentParser(description="MarketMan CLI Tools")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Test command
    test_parser = subparsers.add_parser('test', help='Test system components')
    test_parser.add_argument('--pushover', action='store_true', help='Test Pushover only')
    test_parser.add_argument('--all', action='store_true', help='Run all tests')
    
    # Monitor command
    monitor_parser = subparsers.add_parser('monitor', help='Run monitoring')
    monitor_parser.add_argument('--system', action='store_true', help='System monitoring only')
    monitor_parser.add_argument('--news', action='store_true', help='News analysis only')
    monitor_parser.add_argument('--loop', type=int, help='Run continuously (minutes)')
    
    # Send command (for manual alerts)
    send_parser = subparsers.add_parser('send', help='Send manual notification')
    send_parser.add_argument('message', help='Message to send')
    send_parser.add_argument('--title', default='MarketMan Alert', help='Notification title')
    send_parser.add_argument('--priority', type=int, default=0, help='Priority (-2 to 2)')
    
    # Service command
    service_parser = subparsers.add_parser('service', help='Service management')
    service_parser.add_argument('action', choices=['install', 'start', 'stop', 'status'], help='Service action')
    
    # Setup command
    setup_parser = subparsers.add_parser('setup', help='Setup and configuration')
    setup_parser.add_argument('--notion', action='store_true', help='Set up Notion database')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == 'test':
        if args.pushover:
            print("üß™ Testing Pushover...")
            success = test_pushover()
            sys.exit(0 if success else 1)
        else:
            print("üß™ Running full test suite...")
            import test_setup
            test_setup.main()
    
    elif args.command == 'monitor':
        from marketman_monitor import MarketManMonitor
        monitor = MarketManMonitor()
        
        if args.loop:
            print(f"üîÑ Starting continuous monitoring (every {args.loop} minutes)")
            # Import and run with loop
            import marketman_monitor
            sys.argv = ['marketman_monitor.py', '--loop', str(args.loop)]
            if args.system:
                sys.argv.append('--system-only')
            elif args.news:
                sys.argv.append('--news-only')
            marketman_monitor.main()
        else:
            if args.system:
                monitor.run_system_check()
            elif args.news:
                monitor.run_news_check()
            else:
                monitor.run_full_check()
    
    elif args.command == 'send':
        success = send_pushover_notification(args.message, args.title, args.priority)
        sys.exit(0 if success else 1)
    
    elif args.command == 'service':
        import subprocess
        import os
        
        service_file = '/root/marketMan/marketman.service'
        
        if args.action == 'install':
            print("üì¶ Installing MarketMan service...")
            subprocess.run(['cp', service_file, '/etc/systemd/system/'])
            subprocess.run(['systemctl', 'daemon-reload'])
            subprocess.run(['systemctl', 'enable', 'marketman'])
            print("‚úÖ Service installed. Use 'marketman service start' to begin monitoring.")
        
        elif args.action in ['start', 'stop', 'status']:
            subprocess.run(['systemctl', args.action, 'marketman'])
    
    elif args.command == 'setup':
        if args.notion:
            print("üóÑÔ∏è Setting up Notion database...")
            import subprocess
            subprocess.run(['python', 'notion_setup.py', '--create'])
        else:
            print("Please specify --notion for database setup")
            sys.exit(1)

if __name__ == "__main__":
    main()
