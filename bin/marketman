#!/usr/bin/env python3
"""
MarketMan CLI - Easy command-line interface
Matches your server monitoring workflow with simple commands
"""

import sys
import os
import argparse
import subprocess

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.integrations.pushover_utils import send_pushover_notification, send_energy_alert, test_pushover
from src.integrations.pushover_client import pushover_notifier, test_pushover as test_enhanced_pushover

def main():
    parser = argparse.ArgumentParser(description="MarketMan CLI Tools")
    subparsers = parser.add_subparsers(dest='command', help='Available commands')
    
    # Test command
    test_parser = subparsers.add_parser('test', help='Run all tests with pytest')
    
    # Monitor command
    monitor_parser = subparsers.add_parser('monitor', help='Run monitoring')
    monitor_parser.add_argument('--system', action='store_true', help='System monitoring only')
    monitor_parser.add_argument('--news', action='store_true', help='News analysis only')
    monitor_parser.add_argument('--loop', type=int, help='Run continuously (minutes)')
    
    # Send command (for manual alerts)
    send_parser = subparsers.add_parser('send', help='Send manual notification')
    send_parser.add_argument('message', help='Message to send')
    send_parser.add_argument('--title', default='MarketMan Alert', help='Notification title')
    send_parser.add_argument('--priority', type=int, default=0, help='Priority (-2 to 2)')
    
    # Pushover command
    pushover_parser = subparsers.add_parser('pushover', help='Pushover notification management')
    pushover_parser.add_argument('action', choices=['test', 'status', 'signal', 'warning'], help='Pushover action')
    pushover_parser.add_argument('--message', help='Message for signal/warning')
    pushover_parser.add_argument('--title', help='Title for signal/warning')
    pushover_parser.add_argument('--confidence', type=int, help='Confidence level (1-10)')
    pushover_parser.add_argument('--signal', choices=['Bullish', 'Bearish', 'Neutral'], help='Signal type')
    pushover_parser.add_argument('--etfs', help='Comma-separated list of ETFs')
    pushover_parser.add_argument('--warning-type', help='Type of risk warning')
    
    # Service command
    service_parser = subparsers.add_parser('service', help='Service management')
    service_parser.add_argument('action', choices=['install', 'start', 'stop', 'status'], help='Service action')
    
    # Setup command
    setup_parser = subparsers.add_parser('setup', help='Setup and configuration')
    setup_parser.add_argument('--notion', action='store_true', help='Set up Notion database')
    setup_parser.add_argument('--pushover', action='store_true', help='Set up Pushover credentials')
    
    # Memory command
    memory_parser = subparsers.add_parser('memory', help='Market memory operations')
    memory_parser.add_argument('action', choices=['show', 'clear', 'export'], help='Memory action')
    
    # Run command
    run_parser = subparsers.add_parser('run', help='Run MarketMan analysis')
    run_parser.add_argument('--test', action='store_true', help='Run in test mode')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    if args.command == 'test':
        print("üß™ Running MarketMan tests...")
        subprocess.run(['python', '-m', 'pytest', 'tests/', '-v'])
    
    elif args.command == 'monitor':
        from src.monitoring.marketman_monitor import MarketManMonitor
        monitor = MarketManMonitor()
        
        if args.loop:
            print(f"üîÑ Starting continuous monitoring (every {args.loop} minutes)")
            import marketman_monitor
            sys.argv = ['marketman_monitor.py', '--loop', str(args.loop)]
            if args.system:
                sys.argv.append('--system-only')
            elif args.news:
                sys.argv.append('--news-only')
            marketman_monitor.main()
        else:
            if args.system:
                monitor.run_system_check()
            elif args.news:
                monitor.run_news_check()
            else:
                monitor.run_full_check()
    
    elif args.command == 'run':
        print("üöÄ Running MarketMan analysis...")
        if args.test:
            subprocess.run(['python', '-m', 'src.core.news_signal_orchestrator', 'test'])
        else:
            subprocess.run(['python', '-m', 'src.core.news_signal_orchestrator'])
    
    elif args.command == 'send':
        success = send_pushover_notification(args.message, args.title, args.priority)
        sys.exit(0 if success else 1)
    
    elif args.command == 'pushover':
        if args.action == 'test':
            print("üß™ Testing Pushover connectivity...")
            success = test_enhanced_pushover()
            if success:
                print("‚úÖ Pushover test successful!")
            else:
                print("‚ùå Pushover test failed. Check your credentials.")
            sys.exit(0 if success else 1)
        
        elif args.action == 'status':
            print("üìä Pushover Status:")
            status = pushover_notifier.get_rate_limit_status()
            for key, value in status.items():
                print(f"  {key}: {value}")
        
        elif args.action == 'signal':
            if not all([args.message, args.title, args.confidence, args.signal]):
                print("‚ùå Missing required arguments for signal. Use --message, --title, --confidence, --signal")
                sys.exit(1)
            
            etfs = args.etfs.split(',') if args.etfs else None
            success = pushover_notifier.send_trading_signal(
                signal=args.signal,
                confidence=args.confidence,
                title=args.title,
                reasoning=args.message,
                etfs=etfs
            )
            
            if success:
                print("‚úÖ Trading signal sent successfully!")
            else:
                print("‚ùå Failed to send trading signal")
            sys.exit(0 if success else 1)
        
        elif args.action == 'warning':
            if not all([args.message, args.warning_type]):
                print("‚ùå Missing required arguments for warning. Use --message, --warning-type")
                sys.exit(1)
            
            etfs = args.etfs.split(',') if args.etfs else None
            success = pushover_notifier.send_risk_warning(
                warning_type=args.warning_type,
                message=args.message,
                affected_symbols=etfs
            )
            
            if success:
                print("‚úÖ Risk warning sent successfully!")
            else:
                print("‚ùå Failed to send risk warning")
            sys.exit(0 if success else 1)
    
    elif args.command == 'service':
        service_file = '/root/marketMan/marketman.service'
        
        if args.action == 'install':
            print("üì¶ Installing MarketMan service...")
            subprocess.run(['cp', service_file, '/etc/systemd/system/'])
            subprocess.run(['systemctl', 'daemon-reload'])
            subprocess.run(['systemctl', 'enable', 'marketman'])
            print("‚úÖ Service installed. Use 'marketman service start' to begin monitoring.")
        
        elif args.action in ['start', 'stop', 'status']:
            subprocess.run(['systemctl', args.action, 'marketman'])
    
    elif args.command == 'setup':
        if args.notion:
            print("üìù Setting up Notion database...")
            subprocess.run(['python', '-m', 'src.integrations.notion_phase4', 'setup'])
        
        if args.pushover:
            print("üì± Setting up Pushover credentials...")
            print("1. Go to https://pushover.net/")
            print("2. Create an account and get your User Key")
            print("3. Create a new application and get the API Token")
            print("4. Edit config/settings.yaml and add your credentials:")
            print("   integrations:")
            print("     pushover:")
            print("       api_token: 'your_api_token'")
            print("       user_token: 'your_user_key'")
            print("5. Test with: marketman pushover test")
    
    elif args.command == 'memory':
        from src.core.database.market_memory import MarketMemory
        memory = MarketMemory()
        
        if args.action == 'show':
            print("üß† Market Memory Contents:")
            patterns = memory.get_all_patterns()
            for pattern in patterns:
                print(f"  {pattern}")
        
        elif args.action == 'clear':
            print("üßπ Clearing market memory...")
            memory.clear_all_patterns()
            print("‚úÖ Market memory cleared")
        
        elif args.action == 'export':
            print("üì§ Exporting market memory...")
            patterns = memory.get_all_patterns()
            with open('market_memory_export.json', 'w') as f:
                import json
                json.dump(patterns, f, indent=2, default=str)
            print("‚úÖ Market memory exported to market_memory_export.json")


if __name__ == "__main__":
    main()
