#!/usr/bin/env python3
"""
Update existing Notion database to add the Status field
"""

import os
import sys
import requests
from dotenv import load_dotenv

# Add project root to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

load_dotenv()

def update_notion_database():
    """Add Status field to existing Notion database"""
    
    notion_token = os.getenv("NOTION_TOKEN")
    notion_database_id = os.getenv("NOTION_DATABASE_ID")
    
    if not notion_token or not notion_database_id:
        print("‚ùå Missing NOTION_TOKEN or NOTION_DATABASE_ID in .env file")
        return False
    
    headers = {
        "Authorization": f"Bearer {notion_token}",
        "Content-Type": "application/json",
        "Notion-Version": "2022-06-28"
    }
    
    # Add Status property to existing database
    update_data = {
        "properties": {
            "Status": {
                "select": {
                    "options": [
                        {"name": "New", "color": "blue"},
                        {"name": "Reviewed", "color": "green"},
                        {"name": "Acted On", "color": "purple"},
                        {"name": "Archived", "color": "gray"}
                    ]
                }
            }
        }
    }
    
    try:
        response = requests.patch(
            f"https://api.notion.com/v1/databases/{notion_database_id}",
            headers=headers,
            json=update_data
        )
        
        if response.status_code == 200:
            print("‚úÖ Successfully added Status field to Notion database!")
            print("üéØ You can now track signal review status:")
            print("   ‚Ä¢ New - Fresh signals (default)")
            print("   ‚Ä¢ Reviewed - Signals you've read")
            print("   ‚Ä¢ Acted On - Signals you've acted on")
            print("   ‚Ä¢ Archived - Historical reference")
            return True
        else:
            print(f"‚ùå Failed to update database: {response.status_code}")
            print(f"Error: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error updating database: {e}")
        return False

if __name__ == "__main__":
    print("üîÑ Updating Notion database with Status field...")
    success = update_notion_database()
    
    if success:
        print("\nüéâ Database updated! New MarketMan signals will include Status tracking.")
        print("üí° Existing signals won't have a status - that's normal.")
    else:
        print("\nüí° Make sure your .env file has NOTION_TOKEN and NOTION_DATABASE_ID")
        print("Run this after setting up your Notion integration.")
